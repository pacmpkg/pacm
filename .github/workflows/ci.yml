name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            packages: ""
            use_cross: false
            linker: ""
            linker_env: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            packages: ""
            use_cross: false
            linker: ""
            linker_env: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            packages: ""
            use_cross: false
            linker: ""
            linker_env: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            packages: ""
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            packages: ""
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            packages: ""
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            packages: gcc-aarch64-linux-gnu
            use_cross: false
            linker: aarch64-linux-gnu-gcc
            linker_env: CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            packages: gcc-arm-linux-gnueabihf
            use_cross: false
            linker: arm-linux-gnueabihf-gcc
            linker_env: CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            packages: gcc-multilib
            use_cross: false
            linker: ""
            linker_env: ""
          - os: windows-latest
            target: i686-pc-windows-msvc
            packages: ""
            use_cross: false
            linker: ""
            linker_env: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            packages: ""
            use_cross: true
            linker: ""
            linker_env: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            packages: ""
            use_cross: true
            linker: ""
            linker_env: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            packages: ""
            use_cross: false
            linker: ""
            linker_env: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cross toolchains
      if: runner.os == 'Linux' && matrix.packages != ''
      run: sudo apt-get update && sudo apt-get install -y ${{ matrix.packages }}

    - name: Configure linker
      if: ${{ runner.os == 'Linux' && !matrix.use_cross && matrix.linker != '' }}
      run: echo "${{ matrix.linker_env }}=${{ matrix.linker }}" >> $GITHUB_ENV

    - name: Install cross
      if: ${{ matrix.use_cross }}
      run: cargo install cross --locked

    - name: Build release (cross)
      if: ${{ matrix.use_cross }}
      run: cross build --release --target ${{ matrix.target }}

    - name: Build release (cargo)
      if: ${{ !matrix.use_cross }}
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v5
      with:
        name: pacm-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/pacm
          target/${{ matrix.target }}/release/pacm.exe
          target/${{ matrix.target }}/release/pacm-shim
          target/${{ matrix.target }}/release/pacm-shim.exe
        if-no-files-found: ignore

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run tests with coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: lcov.info
        fail_ci_if_error: false